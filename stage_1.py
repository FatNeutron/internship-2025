# -*- coding: utf-8 -*-
"""stage-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JxT3-rYp_KzhdknhacKZxLczM1ZmdL0f
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy.integrate import solve_ivp

#parameters
N = 700   #no of internvals
R = 270e3    #radius of sphere

dr = R/N
r = np.linspace(0, R, N+1)



##For H-Chondrites taken from Yomogida and Matsui (1983) https://agupubs.onlinelibrary.wiley.com/doi/epdf/10.1029/JB088iB11p09513
Vp = 7.61  #compressional wave velocity (km/s)
kappa = (-1.67 + 2.1*Vp)*1e-7 #thermal diffusivity (m^2/s)


e = 0.8#emissivity
sigma = 5.67037442e-8  #stefan-boltzmann constant
T_neb = 292 #initial temp/ temp of nebula

yearstosec = 365.25*24*3600

Na = 6.022e23
Myr = 3.15576e13 #Myr in seconds
rho = 3500

# initial abundance of 26Al
Al_abnds = 0.0133
Al_ratio = 5e-5
M_Al = 0.026981538
A_Al = Al_abnds * rho * Al_ratio * Na / M_Al  #atom density (atoms/m^3)

lambda_Al = np.log(2) / (0.72*Myr) #decay constant of 26Al (1/s)
Q_Al = 3 * 1.60218e-13

#initial abundance of 60Fe
Fe_abnds = 0.1521
Fe_ratio = 1e-8
M_Fe = 0.05584
A_Fe = Fe_abnds * rho * Fe_ratio * Na / M_Fe  #atom density (atoms/m^3)

lambda_Fe = np.log(2) / (1.5*Myr) #decay constant of 56Fe
Q_Fe = 3 * 1.60218e-13


#given in appendix
ther_expn = 3.8e-5  #thermal expansion (1/K)
cmprss = 1.82e-6    #compressibility (1/Pa)


t0 = 2.85*Myr
tf = 4.58*Myr

# 1D heat equation


def Qrad(t):

  #heating rate per unit volume (W/m^3)
    return (A_Al *lambda_Al *Q_Al * np.exp(-lambda_Al * t) +
            A_Fe *lambda_Fe* Q_Fe * np.exp(-lambda_Fe * t))

def dTdt(t,T):

    #cp value and molar volume of calcium olivine taken from - https://pubs.usgs.gov/bul/1452/report.pdf
    olivine_MVol = 59.11 * 1e-6  # Molar volume [mÂ³/mol]
    c_p = 1.3257e2 + 5.2510e-2*(T) - 1.9049e6/(T**2)

    cv = c_p - (T*olivine_MVol*(ther_expn)**2)/(cmprss)

    S = Qrad(t) / (rho * cv)
    dT = np.zeros_like(T)

    #center point
    dT[0] = 6*kappa*((T[1] - T[0])/ dr**2) + S[0]

    #interior points
    i = np.arange(1,N)
    ri = i*dr

    dT[i] = kappa * ((T[i+1] + T[i-1] - 2*T[i])/(dr**2) \
                     + (1/ri)*( (T[i+1] - T[i-1])/(dr)) ) \
                      + S[i]

    #surface point
    dT[-1] = 2*( kappa* (T[-2] - T[-1])/(dr**2) \
                - e * sigma*(T[-1]**4 - T_neb**4)* (1/dr + 1/R)) \
                + S[-1]

    return dT
'''
    # Linearized radiation term for stability
    linear_factor = 4 * e * sigma * T[-1]**3 if T[-1] > 300 else 0
    dTdr_rad = -q_rad / k_cond

    # Hybrid implicit-explicit discretization
    dT[-1] = (2 * kappa * (T[-2] - T[-1]) / dr**2)\
              - (2 * kappa / (k_cond * dr) * q_rad\
              + (2 * kappa / R) * dTdr_rad\
              + S[-1])
'''

#initial condition (constant temp)
T0 = np.full(N+1 , T_neb)

t_span = (t0, tf)

t_eval = np.linspace(*t_span, 250000)

#integrate the heat eqn
sol = solve_ivp(dTdt, t_span, T0, method = 'BDF', max_step=0.001*Myr, t_eval = t_eval)

print(sol)
print(np.shape(sol.y))
#print(sol.y)

# time and radial grids
r = np.linspace(0, R, N+1)        # radius from 0 to R, shape (N+1,)
time = sol.t / Myr                # time in Myr, shape (1000,)
temperature = sol.y               # shape (N+1, 1000)

# 2D grid for plotting
T_mesh, R_mesh = np.meshgrid(time, r)

# 2D heatmap
plt.figure(figsize=(12, 6))
c = plt.pcolormesh(T_mesh, R_mesh / 1e3, temperature, shading='auto', cmap='viridis')  # radius in km

# Labels and colorbar
plt.xlabel('Time (Myr)', fontsize=12)
plt.ylabel('Radius (km)', fontsize=12)
plt.title('Temperature Evolution (Color = Temperature)', fontsize=14)
plt.colorbar(c, label='Temperature (K)')

plt.tight_layout()
plt.show()

r = np.linspace(0, R, N+1)  # shape: (N+1,)
T_mesh, R_mesh = np.meshgrid(sol.t / Myr, r)  # Convert time to Myr for nicer units
Temperature = sol.y  # shape: (N+1, 1000)


fig = plt.figure(figsize=(12, 8))
ax = fig.add_subplot(111, projection='3d')

# Plot the surface
surf = ax.plot_surface(T_mesh, R_mesh / 1e3, Temperature, cmap='viridis', edgecolor='none')  # Radius in km

# Labels
ax.set_xlabel('Time (Myr)', fontsize=12)
ax.set_ylabel('Radius (km)', fontsize=12)
ax.set_zlabel('Temperature (K)', fontsize=12)
ax.set_title('3D Plot of Temperature vs Time and Radius', fontsize=14)

# Add color bar
fig.colorbar(surf, ax=ax, shrink=0.5, aspect=10, label='Temperature (K)')

plt.style.use('dark_background')
plt.tight_layout()
plt.show()









